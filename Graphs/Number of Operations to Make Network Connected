//LeetCode 1319
//DSU

class Solution {
public:
    vector<int> parent,rank;

    int find(int x) {
        if(parent[x]!=x) {
            parent[x]=find(parent[x]);
        }
        return parent[x];
    }
    void Union (int x, int y) {
        int rx=find(x);
        int ry=find(y);
        if(rx==ry) {
            return;
        }
        if(rank[rx]<rank[ry]) {
            parent[rx]=ry;
        }
        else if(rank[rx]>rank[ry]) {
            parent[ry]=rx;
        }
        else{
            parent[ry]=rx;
            rank[rx]++;
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1) {
            return -1;
        }
        parent.resize(n);
        rank.resize(n,0);
        for(int i=0;i<n;i++) {
            parent[i]=i;
        }
        int components=n;
        for(auto & vec : connections) {
            if(find(vec[0])!=find(vec[1])) {
                Union(vec[0],vec[1]);
                components--;
            }
        }
        return components-1;
    }
};
