
//-----------------------Prim's Algorithm----------------------

class Solution {
    typedef pair<int,int> P;
    public:
    int spanningTree(int V, vector<vector<int>>& edges) {
        // code here
        vector<vector<P>> adj(V);
        for(auto &e: edges) {
            int u=e[0];
            int v=e[1];
            int w=e[2];
            adj[u].push_back({v,w});
            adj[v].push_back({u,w});
        }
        priority_queue<P, vector<P>, greater<P>> pq;
        vector<int> vis(V, 0);
        int mstWeight = 0;
        pq.push({0, 0});
        
        while (!pq.empty()) {
            auto [wt, node] = pq.top();
            pq.pop();
            
            if (vis[node]) continue;
            vis[node] = 1;
            mstWeight += wt;
            
            for (auto [nbr, w] : adj[node]) {
                if (!vis[nbr]) {
                    pq.push({w, nbr});
                }
            }
        }
        
        return mstWeight;
    }
    
};
