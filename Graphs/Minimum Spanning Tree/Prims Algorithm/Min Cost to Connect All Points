


//-------------------------------PRIM'S ALGORITHM----------------------------------





class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size();
        vector<bool> inMST(n, false);
        int node=0, cost=0;

        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<>>pq;
        pq.push({0,0});

        while(node<n) {
            auto[w,u]=pq.top();
            pq.pop();
            if(inMST[u]) {
                continue;
            }
            inMST[u]=true;
            cost+=w;
            node++;

            for(int v=0; v<n; v++) {
                if(!inMST[v]) {
                    int dist=abs(points[u][0]-points[v][0]) + abs(points[u][1]-points[v][1]);
                    pq.push({dist, v});
                }
            }
        }
        return cost;
    }
};
